@rendermode InteractiveServer
@inject IPeopleData sql;

<h3 class="mb-3">Update Person</h3>

@if (people is null)
{
    <p>
        Loading...
    </p>
}
else
{
    <EditForm Model="selectedPersonId" method="post" FormName="selectPersonForm" OnValidSubmit="LoadPersonToUpdate">
        <InputSelect @bind-Value="selectedPersonId.Id" class="form-control">
            @foreach (var person in people)
                {
                    <option value="@person.Id">@person.FirstName @person.LastName </option>
                }
        </InputSelect>
         <button type="submit" class="btn btn-outline-primary my-3">Select to Edit</button>
    </EditForm>

    @if (personToUpdate is not null)
    {
        <EditForm Model="personToUpdate" method="post" FormName="updatePersonForm" OnValidSubmit="UpdatePersonAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label>Id:</label>
        <span>@personToUpdate.Id</span>
    </div>
    <div class="mb-3">
        <label>First Name:</label>
        <InputText @bind-Value="personToUpdate.FirstName" />
    </div>
    <div class="mb-3">
        <label>Last Name:</label>
        <InputText @bind-Value="personToUpdate.LastName" />
    </div>

    <button type="submit" class="btn btn-outline-primary">Update</button>

</EditForm>
    }

}


    @code {
        private IEnumerable<PersonModel>? people;
        private PersonModel? personToUpdate;
        private SelectedPersonIdModel selectedPersonId = new();
        private class SelectedPersonIdModel
        {    
            public int Id { get; set; }
         
        }
        protected override async Task OnInitializedAsync()
        {
        await RefreshData();
        }

        private void LoadPersonToUpdate()
        {
        var foundPerson = people!.Where(p => p.Id == selectedPersonId.Id).FirstOrDefault();
            
            if (foundPerson is not null)
            {
                personToUpdate = new();
                personToUpdate.Id = foundPerson.Id;
                personToUpdate.FirstName = foundPerson.FirstName;
                personToUpdate.LastName = foundPerson.LastName;
                @* personToUpdate = foundPerson; *@
            }
        
        }

        private async Task RefreshData()
        {
        people = null;
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        people = await sql.GetAllPeople();
        }

    private async Task UpdatePersonAsync()
    {
        await sql.UpdatePerson(personToUpdate!);
        personToUpdate = null;
        selectedPersonId.Id = 0;
        await RefreshData();

    }
    }